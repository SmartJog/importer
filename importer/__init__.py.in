# -*- coding: utf-8 -*-

""" Importer """

import os.path
import requests
import traceback
import cookielib
import httplib
import socket
import cStringIO
import gzip

from importer.exc import ImporterError, ImporterDeserializeError, ImporterSerializeError, ImporterConnectError
from importer.decoders import DecoderFactory
from importer.generators import GeneratorFactory

__all__ = ['ImporterError', 'ImporterDeserializeError', 'ImporterSerializeError', 'ImporterConnectError', 'Importer']

VERSION = "@PACKAGE_VERSION@"

class ImporterBase(object):
    """Base class for both ImporterModule and ImporterVariable.

    Provide call/get/set methods, relying

    on proper self.__objinst__ object.

    ImporterModule and ImporterVariable are

    in charge of creating the appropriate object.
    """
    def __init__(self):
        self.__conf__ = {}
        self.__objinst__ = None

    def __getitem__(self, key):
        """
            Used to retrieve data from Importer configuration.
            Let exceptions be thrown.
        """
        return self.__conf__[key]

    def __setitem__(self, key, value):
        """ Set configuration key. """
        self.__conf__[key] = value

    def __delitem__(self, key):
        """ Delete configuration key. """
        del self.__conf__[key]

    def call(self, method, *args, **kw):
        """ Getattr self.__objinst__ which will be a module instance or a variable instance. """
        return getattr(self.__objinst__, method)(*args, **kw)

    def get(self, attr):
        """ Getattr self.__objinst__ and returns. """
        return getattr(self.__objinst__, attr)


class ImporterVariable(ImporterBase):
    def __init__(self, _conf, module, klass, *args, **kw):
        ImporterBase.__init__(self)
        self.__mod__ = module
        self.__klass__ = klass
        self.__objinst__ = self.__mod__.get(self.__klass__)(*args, **kw)


class Importer(ImporterBase):
    """
        Main class. Contains all modules.
        Call/get/set/instantiate always check if execution must be done remotely.
    """
    def __init__(self):
        ImporterBase.__init__(self)
        self.__scope__ = {}
        self.__bound__ = None
        self.__cj__ = None

    def call(self, module, method, *args, **kw):
        """Perform a call to module.method, passing the given *args, **kw.

        Override ImporterBase.call()

        warning: If the ssl_ca is not given the verify argument is put to false
        and thus certificates are not verified.

        Return: module.method return.
        """
        if 'distant_url' in self.__conf__.keys():
            mod = '.'.join((module, method))
            return self.__perform_distant__(mod, 'call', *args, **kw)

        try:
            if module in self.__scope__.keys():  # Class instance
                return self.__scope__[module].call(method, *args, **kw)
            mod = __import__(module, {}, {}, [''])
            callee = getattr(mod, method)
            # The __request__ argument is added by the Exporter.
            # It is used only when the __exportable__ flag is present.
            request = kw.pop('__request__', None)
            # This attribute means that the callee object is a _Export object
            # defined by the @exportable decorator.
            # This is used to distinct between a standard python method, or a
            # webengine method, because a webengine method need a request object.
            if hasattr(callee, '__exportable__'):
                return callee(request, *args, **kw)
            else:
                return getattr(mod, method)(*args, **kw)

        except Exception, exc:
            raise ImporterError(str(exc), traceback=traceback.format_exc())

    def get(self, module, attr):
        """ Retrieve an attr from the given module. """
        if 'distant_url' in self.__conf__.keys():
            mod = '.'.join((module, attr))
            return self.__perform_distant__(mod, 'get')

        try:
            if module in self.__scope__.keys():  # Class instance
                return self.__scope__[module].get(attr)
            mod = __import__(module, {}, {}, [''])
            return getattr(mod, attr)
        except Exception, exc:
            raise ImporterError(str(exc), traceback=traceback.format_exc())

    def _set_bound(self, bound):
        """ Bound Importer scope to "bound" list. """
        self.__bound__ = bound

    def _get_bound(self):
        """ Returns bound list. """
        return self.__bound__

    bound = property(_get_bound, _set_bound)

    @staticmethod
    def __decompress__(response):
        """ Transparently decompresses data read from @response. """
        if response.headers.get('Content-Encoding') == 'gzip':
            # Decompress the data
            data_compressed = cStringIO.StringIO(response.raw.read())
            gzip_decompressor = gzip.GzipFile(fileobj=data_compressed)
            data_read = gzip_decompressor.read()
        else:
            data_read = response.raw.read()

        return data_read

    def __perform_distant__(self, module, call_type, *args, **kw):
        """ Perform the distant call. """
        try:
            if not self.__cj__:
                self.__cj__ = cookielib.CookieJar()

            if 'timeout' in self.__conf__.keys():
                socket.setdefaulttimeout(self.__conf__['timeout'])
            else:
                socket.setdefaulttimeout(30)

            path = module.replace('.', '/') + '/'  # Force trailing slash

            # Serialize with serialization method provided in configuration
            serializer = GeneratorFactory.get(self.__conf__.get('serialization', 'msgpack'))
            data = serializer.generate({'type': call_type, 'args': args, 'kw': kw})
            header = {
                'WEBENGINE_OUTPUT': self.__conf__.get('serialization', 'msgpack'),
                'Accept-Encoding': 'gzip',  # We accept gzipped content
                'Content-Type': serializer.mime_type,
                'User-Agent': self.__conf__.get('user_agent', 'Importer/' + VERSION),
            }

            response = requests.post(os.path.join(self.__conf__['distant_url'], path),
                                     verify=self.__conf__.get('ssl_ca', False),
                                     data=data, headers=header,
                                     cert=(self.__conf__.get('ssl_cert'),
                                           self.__conf__.get('ssl_key')), stream=True)

            data_read = self.__decompress__(response)

            if data_read == '':
                return None

            try:
                serializer = DecoderFactory.get(self.__conf__.get('serialization', 'msgpack'))
                data_decoded = serializer.decode(data_read)
                return data_decoded
            except Exception:
                raise ImporterDeserializeError(data_read, traceback=traceback.format_exc())

        except requests.HTTPError, exc:
            error = self.__decompress__(exc)

            # Most likely a normal HTTP server error
            if exc.headers.get('Content-Type') != 'application/octet-stream':
                raise ImporterError(str(exc), local=False)

            try:
                serializer = DecoderFactory.get(self.__conf__.get('serialization', 'msgpack'))
                data_decoded = serializer.decode(error)  # Read exception
            except Exception, exc:
                raise ImporterDeserializeError(error, traceback=error)

            raise ImporterError(data_decoded['msg'],
                                local=False, traceback=data_decoded['traceback'])

        except requests.ConnectionError, exc:
            raise ImporterConnectError(str(exc), traceback=traceback.format_exc())

        except Exception, exc:
            raise ImporterSerializeError(str(exc), traceback=traceback.format_exc())
